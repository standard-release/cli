{"basic":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"async (t) => {\n  t.strictEqual(typeof release, 'function');\n\n  try {\n    await release({ cwd: 'foo' });\n  } catch (err) {\n    t.ok(/Cannot find module/.test(err.message));\n  }\n}","title":"basic"},"should detect new commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"async (t) => {\n  const fakePkg = path.join(__dirname, 'fakepkg');\n\n  await fs.remove(fakePkg);\n  await fs.ensureDir(fakePkg);\n  await fs.outputJson(path.join(fakePkg, 'package.json'), {\n    name: '@tunnckocore/kokoko3',\n  });\n\n  const git = await gitSetup(fakePkg);\n\n  await git.add('./*');\n  await git.commit('feat: initial blank release');\n  await git.addTag('v1.1.0');\n\n  await fs.outputFile(path.join(fakePkg, 'foo.txt'), 'bar');\n  await git.add('./*');\n  await git.commit('major(release): qxu quack');\n\n  await fs.outputFile(path.join(fakePkg, 'fix2.txt'), '222xasas');\n  await git.add('./*');\n  await git.commit('fix: fo222222o bar baz');\n\n  const result = await release({ cwd: fakePkg });\n\n  t.strictEqual(result.increment, 'major');\n  t.strictEqual(result.lastVersion, '1.1.0');\n  t.strictEqual(result.nextVersion, '2.0.0');\n  fs.remove(fakePkg);\n}","title":"should detect new commits"},"exists":true}